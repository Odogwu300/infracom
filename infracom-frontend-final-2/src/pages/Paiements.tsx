import Layout from "../components/Layout";
import axiosInstance from "../api/axiosInstance";
import CrudForm from "../components/CrudForm";
import { useEffect, useState } from "react";
import { pushToast } from "../components/Toast";
interface PaiementRow{ id:number; usager:any; montant:number; datePaiement:string; status:string; }
const ENDPOINT='/paiements';
export default function Paiements(){ const [rows,setRows]=useState<PaiementRow[]>([]); const [creating,setCreating]=useState(false); const [editing,setEditing]=useState<PaiementRow|null>(null); const fetchData=async()=>{ try{ const r=await axiosInstance.get<PaiementRow[]>(ENDPOINT); setRows(r.data);}catch(e){pushToast('Err','error')} }; useEffect(()=>{fetchData()},[]);
  const handleCreate=async(payload:any)=>{ try{ await axiosInstance.post(ENDPOINT,payload); pushToast('Créé','success'); setCreating(false); fetchData(); }catch(e){pushToast('Err','error')} };
  const handleUpdate=async(payload:any)=>{ if(!editing) return; try{ await axiosInstance.put(`${ENDPOINT}/${(editing as any).id}`,payload); pushToast('Maj','success'); setEditing(null); fetchData(); }catch(e){pushToast('Err','error')} };
  const handleDelete=async(id:number)=>{ if(!confirm('Confirmer?'))return; try{ await axiosInstance.delete(`${ENDPOINT}/${id}`); pushToast('Suppr','success'); fetchData(); }catch(e){pushToast('Err','error')} };
  return (<Layout><div className="flex items-center justify-between mb-4"><h2 className="text-2xl font-semibold">Paiements</h2><button className="bg-green-600 text-white px-3 py-2 rounded" onClick={()=>setCreating(true)}>Nouveau</button></div>{creating&&<div className="bg-white p-4 mb-4 border"><CrudForm initial={{}} fields={[{name:'usager',label:'Usager',type:'string'},{name:'montant',label:'Montant',type:'number'},{name:'datePaiement',label:'Date',type:'date'},{name:'status',label:'Statut',type:'string'}]} onSubmit={handleCreate} submitLabel="Créer" /></div>}{editing&&<div className="bg-white p-4 mb-4 border"><CrudForm initial={editing as any} fields={[{name:'usager',label:'Usager',type:'string'},{name:'montant',label:'Montant',type:'number'},{name:'datePaiement',label:'Date',type:'date'},{name:'status',label:'Statut',type:'string'}]} onSubmit={handleUpdate} submitLabel="Mettre à jour" /></div>}<div className="bg-white border rounded overflow-auto"><table className="w-full"><thead className="bg-gray-100"><tr><th className="border px-3 py-2">ID</th><th className="border px-3 py-2">Usager</th><th className="border px-3 py-2">Montant</th><th className="border px-3 py-2">Date</th><th className="border px-3 py-2">Statut</th><th className="border px-3 py-2">Actions</th></tr></thead><tbody>{rows.map(r=>(<tr key={r.id} className="hover:bg-gray-50"><td className="border px-3 py-2">{r.id}</td><td className="border px-3 py-2">{r.usager?.nom ?? JSON.stringify(r.usager)}</td><td className="border px-3 py-2">{r.montant}</td><td className="border px-3 py-2">{r.datePaiement}</td><td className="border px-3 py-2">{r.status}</td><td className="border px-3 py-2 space-x-2"><button className="px-2 py-1 rounded bg-yellow-500 text-white" onClick={()=>setEditing(r)}>Éditer</button><button className="px-2 py-1 rounded bg-red-600 text-white" onClick={()=>handleDelete(r.id)}>Supprimer</button></td></tr>))}</tbody></table></div></Layout>); }
