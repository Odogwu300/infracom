import Layout from "../components/Layout";
import axiosInstance from "../api/axiosInstance";
import CrudForm from "../components/CrudForm";
import { useEffect, useState } from "react";
import { pushToast } from "../components/Toast";
interface UsagerRow{ id:number; nom:string; prenom:string; telephone:string; email:string; }
const ENDPOINT='/usagers';
export default function Usagers(){
  const [rows,setRows]=useState<UsagerRow[]>([]); const [loading,setLoading]=useState(true); const [creating,setCreating]=useState(false); const [editing,setEditing]=useState<UsagerRow|null>(null);
  const fetchData = async ()=>{ setLoading(true); try{ const r = await axiosInstance.get<UsagerRow[]>(ENDPOINT); setRows(r.data); }catch(e){ pushToast('Err','error') } finally{ setLoading(false); } };
  useEffect(()=>{ fetchData(); }, []);
  const handleCreate = async (payload:any)=>{ try{ await axiosInstance.post(ENDPOINT,payload); pushToast('Créé','success'); setCreating(false); fetchData(); }catch(e){ pushToast('Err','error') } };
  const handleUpdate = async (payload:any)=>{ if(!editing) return; try{ await axiosInstance.put(`${ENDPOINT}/${(editing as any).id}`, payload); pushToast('Maj','success'); setEditing(null); fetchData(); }catch(e){ pushToast('Err','error') } };
  const handleDelete = async (id:number)=>{ if(!confirm('Confirmer?')) return; try{ await axiosInstance.delete(`${ENDPOINT}/${id}`); pushToast('Suppr','success'); fetchData(); }catch(e){ pushToast('Err','error') } };
  return (<Layout><div className="flex items-center justify-between mb-4"><h2 className="text-2xl font-semibold">Usagers</h2><button className="bg-green-600 text-white px-3 py-2 rounded" onClick={()=>setCreating(true)}>Nouveau</button></div>{creating&&<div className="bg-white p-4 mb-4 border"><CrudForm initial={{}} fields={[{name:'nom',label:'Nom',type:'string'},{name:'prenom',label:'Prénom',type:'string'},{name:'telephone',label:'Téléphone',type:'string'},{name:'email',label:'Email',type:'string'}]} onSubmit={handleCreate} submitLabel="Créer" /></div>}{editing&&<div className="bg-white p-4 mb-4 border"><CrudForm initial={editing as any} fields={[{name:'nom',label:'Nom',type:'string'},{name:'prenom',label:'Prénom',type:'string'},{name:'telephone',label:'Téléphone',type:'string'},{name:'email',label:'Email',type:'string'}]} onSubmit={handleUpdate} submitLabel="Mettre à jour" /></div>}<div className="bg-white border rounded overflow-auto"><table className="w-full"><thead className="bg-gray-100"><tr><th className="border px-3 py-2">ID</th><th className="border px-3 py-2">Nom</th><th className="border px-3 py-2">Prénom</th><th className="border px-3 py-2">Téléphone</th><th className="border px-3 py-2">Email</th><th className="border px-3 py-2">Actions</th></tr></thead><tbody>{rows.map(r=>(<tr key={r.id} className="hover:bg-gray-50"><td className="border px-3 py-2">{r.id}</td><td className="border px-3 py-2">{r.nom}</td><td className="border px-3 py-2">{r.prenom}</td><td className="border px-3 py-2">{r.telephone}</td><td className="border px-3 py-2">{r.email}</td><td className="border px-3 py-2 space-x-2"><button className="px-2 py-1 rounded bg-yellow-500 text-white" onClick={()=>setEditing(r)}>Éditer</button><button className="px-2 py-1 rounded bg-red-600 text-white" onClick={()=>handleDelete(r.id)}>Supprimer</button></td></tr>))}</tbody></table></div></Layout>);
}
