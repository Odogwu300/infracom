import Layout from "../components/Layout";
import axiosInstance from "../api/axiosInstance";
import CrudForm from "../components/CrudForm";
import { useEffect, useState } from "react";
import { pushToast } from "../components/Toast";
interface EquipementRow{ id:number; numero:string; type:string; status:string; }
const ENDPOINT='/equipements';
export default function Equipements(){
  const [rows,setRows]=useState<EquipementRow[]>([]); const [loading,setLoading]=useState(true); const [creating,setCreating]=useState(false); const [editing,setEditing]=useState<EquipementRow|null>(null); const [query,setQuery]=useState('');
  const fetchData=async()=>{ setLoading(true); try{ const r = await axiosInstance.get<EquipementRow[]>(ENDPOINT); setRows(r.data); }catch(e){ pushToast('Err','error') }finally{ setLoading(false); } };
  useEffect(()=>{ fetchData(); }, []);
  const doSearch = async ()=>{ setLoading(true); try{ const r = await axiosInstance.get(`${ENDPOINT}/search?q=${encodeURIComponent(query)}`); setRows(r.data);}catch(e){ pushToast('Err recherche','error') }finally{ setLoading(false); } };
  const handleCreate = async (payload:any, files?:Record<string,File>)=>{ try{ const form = new FormData(); for(const k in payload) form.append(k,payload[k]); if(files) for(const k in files) form.append(k, files[k]); await axiosInstance.post(ENDPOINT, form, { headers: {'Content-Type':'multipart/form-data'} }); pushToast('Créé','success'); setCreating(false); fetchData(); }catch(e){ pushToast('Err création','error') } };
  const handleUpdate = async (payload:any, files?:Record<string,File>)=>{ if(!editing) return; try{ const form = new FormData(); for(const k in payload) form.append(k,payload[k]); if(files) for(const k in files) form.append(k, files[k]); await axiosInstance.put(`${ENDPOINT}/${(editing as any).id}`, form, { headers: {'Content-Type':'multipart/form-data'} }); pushToast('Maj','success'); setEditing(null); fetchData(); }catch(e){ pushToast('Err maj','error') } };
  const handleDelete = async (id:number)=>{ if(!confirm('Confirmer?')) return; try{ await axiosInstance.delete(`${ENDPOINT}/${id}`); pushToast('Suppr','success'); fetchData(); }catch(e){ pushToast('Err suppr','error') } };
  const uploadDocument = async (id:number, file:File)=>{ try{ const fd = new FormData(); fd.append('file', file); await axiosInstance.post(`${ENDPOINT}/${id}/documents`, fd, { headers: {'Content-Type':'multipart/form-data'} }); pushToast('Document envoyé','success'); }catch(e){ pushToast('Err upload','error') } };
  return (<Layout><div className="flex items-center justify-between mb-4"><h2 className="text-2xl font-semibold">Équipements</h2><div className="flex items-center gap-2"><input className="border p-2 rounded" placeholder="Recherche..." value={query} onChange={e=>setQuery(e.target.value)} /><button className="bg-blue-600 text-white px-3 py-2 rounded" onClick={doSearch}>Rechercher</button><button className="bg-green-600 text-white px-3 py-2 rounded" onClick={()=>setCreating(true)}>Nouveau</button></div></div>{creating&&<div className="bg-white p-4 mb-4 border"><CrudForm initial={{}} fields={[{name:'numero',label:'Numéro',type:'string'},{name:'type',label:'Type',type:'string'},{name:'status',label:'Statut',type:'string'},{name:'document',label:'Document',type:'file'}]} onSubmit={handleCreate} submitLabel="Créer" /></div>}{editing&&<div className="bg-white p-4 mb-4 border"><CrudForm initial={editing as any} fields={[{name:'numero',label:'Numéro',type:'string'},{name:'type',label:'Type',type:'string'},{name:'status',label:'Statut',type:'string'},{name:'document',label:'Document',type:'file'}]} onSubmit={handleUpdate} submitLabel="Mettre à jour" /></div>}<div className="bg-white border rounded overflow-auto"><table className="w-full"><thead className="bg-gray-100"><tr><th className="border px-3 py-2">ID</th><th className="border px-3 py-2">Numéro</th><th className="border px-3 py-2">Type</th><th className="border px-3 py-2">Statut</th><th className="border px-3 py-2">Actions</th></tr></thead><tbody>{rows.map(r=>(<tr key={r.id} className="hover:bg-gray-50"><td className="border px-3 py-2">{r.id}</td><td className="border px-3 py-2">{r.numero}</td><td className="border px-3 py-2">{r.type}</td><td className="border px-3 py-2">{r.status}</td><td className="border px-3 py-2 space-x-2"><label className="px-2 py-1 rounded bg-blue-500 text-white cursor-pointer"><input type="file" className="hidden" onChange={e=>{ if(e.target.files && e.target.files[0]) uploadDocument(r.id, e.target.files[0]); }} />Uploader</label><button className="px-2 py-1 rounded bg-yellow-500 text-white" onClick={()=>setEditing(r)}>Éditer</button><button className="px-2 py-1 rounded bg-red-600 text-white" onClick={()=>handleDelete(r.id)}>Supprimer</button></td></tr>))}</tbody></table></div></Layout>);
}
